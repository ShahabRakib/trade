// Define the grid data
const data = [
    "GGGGGGGGG", "GGGGGGGGR", "GGGGGGGRG", "GGGGGGGRR", "GGGGGGRGG", "GGGGGGRGR", "GGGGGGRRG", "GGGGGGRRR",
    "GGGGGRGGG", "GGGGGRGGR", "GGGGGRGRG", "GGGGGRGRR", "GGGGGRRGG", "GGGGGRRGR", "GGGGGRRRG", "GGGGGRRRR",
    "GGGGRGGGG", "GGGGRGGGR", "GGGGRGGRG", "GGGGRGGRR", "GGGGRGRGG", "GGGGRGRGR", "GGGGRGRRG", "GGGGRGRRR",
    "GGGGRRGGG", "GGGGRRGGR", "GGGGRRGRG", "GGGGRRGRR", "GGGGRRRGG", "GGGGRRRGR", "GGGGRRRRG", "GGGGRRRRR",
    "GGGRGGGGG", "GGGRGGGGR", "GGGRGGGRG", "GGGRGGGRR", "GGGRGGRGG", "GGGRGGRGR", "GGGRGGRRG", "GGGRGGRRR",
    "GGGRGRGGG", "GGGRGRGGR", "GGGRGRGRG", "GGGRGRGRR", "GGGRGRRGG", "GGGRGRRGR", "GGGRGRRRG", "GGGRGRRRR",
    "GGGRRGGGG", "GGGRRGGGR", "GGGRRGGRG", "GGGRRGGRR", "GGGRRGRGG", "GGGRRGRGR", "GGGRRGRRG", "GGGRRGRRR",
    "GGGRRRGGG", "GGGRRRGGR", "GGGRRRGRG", "GGGRRRGRR", "GGGRRRRGG", "GGGRRRRGR", "GGGRRRRRG", "GGGRRRRRR",
    "GGRGGGGGG", "GGRGGGGGR", "GGRGGGGRG", "GGRGGGGRR", "GGRGGGRGG", "GGRGGGRGR", "GGRGGGRRG", "GGRGGGRRR",
    "GGRGGRGGG", "GGRGGRGGR", "GGRGGRGRG", "GGRGGRGRR", "GGRGGRRGG", "GGRGGRRGR", "GGRGGRRRG", "GGRGGRRRR",
    "GGRGRGGGG", "GGRGRGGGR", "GGRGRGGRG", "GGRGRGGRR", "GGRGRGRGG", "GGRGRGRGR", "GGRGRGRRG", "GGRGRGRRR",
    "GGRGRRGGG", "GGRGRRGGR", "GGRGRRGRG", "GGRGRRGRR", "GGRGRRRGG", "GGRGRRRGR", "GGRGRRRRG", "GGRGRRRRR",
    "GGRRGGGGG", "GGRRGGGGR", "GGRRGGGRG", "GGRRGGGRR", "GGRRGGRGG", "GGRRGGRGR", "GGRRGGRRG", "GGRRGGRRR",
    "GGRRGRGGG", "GGRRGRGGR", "GGRRGRGRG", "GGRRGRGRR", "GGRRGRRGG", "GGRRGRRGR", "GGRRGRRRG", "GGRRGRRRR",
    "GGRRRGGGG", "GGRRRGGGR", "GGRRRGGRG", "GGRRRGGRR", "GGRRRGRGG", "GGRRRGRGR", "GGRRRGRRG", "GGRRRGRRR",
    "GGRRRRGGG", "GGRRRRGGR", "GGRRRRGRG", "GGRRRRGRR", "GGRRRRRGG", "GGRRRRRGR", "GGRRRRRRG", "GGRRRRRRR",
    "GRGGGGGGG", "GRGGGGGGR", "GRGGGGGRG", "GRGGGGGRR", "GRGGGGRGG", "GRGGGGRGR", "GRGGGGRRG", "GRGGGGRRR",
    "GRGGGRGGG", "GRGGGRGGR", "GRGGGRGRG", "GRGGGRGRR", "GRGGGRRGG", "GRGGGRRGR", "GRGGGRRRG", "GRGGGRRRR",
    "GRGGRGGGG", "GRGGRGGGR", "GRGGRGGRG", "GRGGRGGRR", "GRGGRGRGG", "GRGGRGRGR", "GRGGRGRRG", "GRGGRGRRR",
    "GRGGRRGGG", "GRGGRRGGR", "GRGGRRGRG", "GRGGRRGRR", "GRGGRRRGG", "GRGGRRRGR", "GRGGRRRRG", "GRGGRRRRR",
    "GRGRGGGGG", "GRGRGGGGR", "GRGRGGGRG", "GRGRGGGRR", "GRGRGGRGG", "GRGRGGRGR", "GRGRGGRRG", "GRGRGGRRR",
    "GRGRGRGGG", "GRGRGRGGR", "GRGRGRGRG", "GRGRGRGRR", "GRGRGRRGG", "GRGRGRRGR", "GRGRGRRRG", "GRGRGRRRR",
    "GRGRRGGGG", "GRGRRGGGR", "GRGRRGGRG", "GRGRRGGRR", "GRGRRGRGG", "GRGRRGRGR", "GRGRRGRRG", "GRGRRGRRR",
    "GRGRRRGGG", "GRGRRRGGR", "GRGRRRGRG", "GRGRRRGRR", "GRGRRRRGG", "GRGRRRRGR", "GRGRRRRRG", "GRGRRRRRR",
    "GRRGGGGGG", "GRRGGGGGR", "GRRGGGGRG", "GRRGGGGRR", "GRRGGGRGG", "GRRGGGRGR", "GRRGGGRRG", "GRRGGGRRR",
    "GRRGGRGGG", "GRRGGRGGR", "GRRGGRGRG", "GRRGGRGRR", "GRRGGRRGG", "GRRGGRRGR", "GRRGGRRRG", "GRRGGRRRR",
    "GRRGRGGGG", "GRRGRGGGR", "GRRGRGGRG", "GRRGRGGRR", "GRRGRGRGG", "GRRGRGRGR", "GRRGRGRRG", "GRRGRGRRR",
    "GRRGRRGGG", "GRRGRRGGR", "GRRGRRGRG", "GRRGRRGRR", "GRRGRRRGG", "GRRGRRRGR", "GRRGRRRRG", "GRRGRRRRR",
    "GRRRGGGGG", "GRRRGGGGR", "GRRRGGGRG", "GRRRGGGRR", "GRRRGGRGG", "GRRRGGRGR", "GRRRGGRRG", "GRRRGGRRR",
    "GRRRGRGGG", "GRRRGRGGR", "GRRRGRGRG", "GRRRGRGRR", "GRRRGRRGG", "GRRRGRRGR", "GRRRGRRRG", "GRRRGRRRR",
    "GRRRRGGGG", "GRRRRGGGR", "GRRRRGGRG", "GRRRRGGRR", "GRRRRGRGG", "GRRRRGRGR", "GRRRRGRRG", "GRRRRGRRR",
    "GRRRRRGGG", "GRRRRRGGR", "GRRRRRGRG", "GRRRRRGRR", "GRRRRRRGG", "GRRRRRRGR", "GRRRRRRRG", "GRRRRRRRR", "RGGGGGGGG", "RGGGGGGGR", "RGGGGGGRG", "RGGGGGGRR", "RGGGGGRGG", "RGGGGGRGR", "RGGGGGRRG", "RGGGGGRRR", "RGGGGRGGG", "RGGGGRGGR", "RGGGGRGRG", "RGGGGRGRR", "RGGGGRRGG", "RGGGGRRGR", "RGGGGRRRG", "RGGGGRRRR",
"RGGGRGGGG", "RGGGRGGGR", "RGGGRGGRG", "RGGGRGGRR", "RGGGRGRGG", "RGGGRGRGR", "RGGGRGRRG", "RGGGRGRRR", "RGGGRRGGG", "RGGGRRGGR", "RGGGRRGRG", "RGGGRRGRR", "RGGGRRRGG", "RGGGRRRGR", "RGGGRRRRG", "RGGGRRRRR",
"RGGRGGGGG", "RGGRGGGGR", "RGGRGGGRG", "RGGRGGGRR", "RGGRGGRGG", "RGGRGGRGR", "RGGRGGRRG", "RGGRGGRRR", "RGGRGRGGG", "RGGRGRGGR", "RGGRGRGRG", "RGGRGRGRR", "RGGRGRRGG", "RGGRGRRGR", "RGGRGRRRG", "RGGRGRRRR",
"RGGRRGGGG", "RGGRRGGGR", "RGGRRGGRG", "RGGRRGGRR", "RGGRRGRGG", "RGGRRGRGR", "RGGRRGRRG", "RGGRRGRRR", "RGGRRRGGG", "RGGRRRGGR", "RGGRRRGRG", "RGGRRRGRR", "RGGRRRRGG", "RGGRRRRGR", "RGGRRRRRG", "RGGRRRRRR",
"RGRGGGGGG", "RGRGGGGGR", "RGRGGGGRG", "RGRGGGGRR", "RGRGGGRGG", "RGRGGGRGR", "RGRGGGRRG", "RGRGGGRRR", "RGRGGRGGG", "RGRGGRGGR", "RGRGGRGRG", "RGRGGRGRR", "RGRGGRRGG", "RGRGGRRGR", "RGRGGRRRG", "RGRGGRRRR",
"RGRGRGGGG", "RGRGRGGGR", "RGRGRGGRG", "RGRGRGGRR", "RGRGRGRGG", "RGRGRGRGR", "RGRGRGRRG", "RGRGRGRRR", "RGRGRRGGG", "RGRGRRGGR", "RGRGRRGRG", "RGRGRRGRR", "RGRGRRRGG", "RGRGRRRGR", "RGRGRRRRG", "RGRGRRRRR",
"RGRRGGGGG", "RGRRGGGGR", "RGRRGGGRG", "RGRRGGGRR", "RGRRGGRGG", "RGRRGGRGR", "RGRRGGRRG", "RGRRGGRRR", "RGRRGRGGG", "RGRRGRGGR", "RGRRGRGRG", "RGRRGRGRR", "RGRRGRRGG", "RGRRGRRGR", "RGRRGRRRG", "RGRRGRRRR",
"RGRRRGGGG", "RGRRRGGGR", "RGRRRGGRG", "RGRRRGGRR", "RGRRRGRGG", "RGRRRGRGR", "RGRRRGRRG", "RGRRRGRRR", "RGRRRRGGG", "RGRRRRGGR", "RGRRRRGRG", "RGRRRRGRR", "RGRRRRRGG", "RGRRRRRGR", "RGRRRRRRG", "RGRRRRRRR",
"RRGGGGGGG", "RRGGGGGGR", "RRGGGGGRG", "RRGGGGGRR", "RRGGGGRGG", "RRGGGGRGR", "RRGGGGRRG", "RRGGGGRRR", "RRGGGRGGG", "RRGGGRGGR", "RRGGGRGRG", "RRGGGRGRR", "RRGGGRRGG", "RRGGGRRGR", "RRGGGRRRG", "RRGGGRRRR",
"RRGGRGGGG", "RRGGRGGGR", "RRGGRGGRG", "RRGGRGGRR", "RRGGRGRGG", "RRGGRGRGR", "RRGGRGRRG", "RRGGRGRRR", "RRGGRRGGG", "RRGGRRGGR", "RRGGRRGRG", "RRGGRRGRR", "RRGGRRRGG", "RRGGRRRGR", "RRGGRRRRG", "RRGGRRRRR",
"RRGRGGGGG", "RRGRGGGGR", "RRGRGGGRG", "RRGRGGGRR", "RRGRGGRGG", "RRGRGGRGR", "RRGRGGRRG", "RRGRGGRRR", "RRGRGRGGG", "RRGRGRGGR", "RRGRGRGRG", "RRGRGRGRR", "RRGRGRRGG", "RRGRGRRGR", "RRGRGRRRG", "RRGRGRRRR",
"RRGRRGGGG", "RRGRRGGGR", "RRGRRGGRG", "RRGRRGGRR", "RRGRRGRGG", "RRGRRGRGR", "RRGRRGRRG", "RRGRRGRRR", "RRGRRRGGG", "RRGRRRGGR", "RRGRRRGRG", "RRGRRRGRR", "RRGRRRRGG", "RRGRRRRGR", "RRGRRRRRG", "RRGRRRRRR",
"RRRGGGGGG", "RRRGGGGGR", "RRRGGGGRG", "RRRGGGGRR", "RRRGGGRGG", "RRRGGGRGR", "RRRGGGRRG", "RRRGGGRRR", "RRRGGRGGG", "RRRGGRGGR", "RRRGGRGRG", "RRRGGRGRR", "RRRGGRRGG", "RRRGGRRGR", "RRRGGRRRG", "RRRGGRRRR",
"RRRGRGGGG", "RRRGRGGGR", "RRRGRGGRG", "RRRGRGGRR", "RRRGRGRGG", "RRRGRGRGR", "RRRGRGRRG", "RRRGRGRRR", "RRRGRRGGG", "RRRGRRGGR", "RRRGRRGRG", "RRRGRRGRR", "RRRGRRRGG", "RRRGRRRGR", "RRRGRRRRG", "RRRGRRRRR",
"RRRRGGGGG", "RRRRGGGGR", "RRRRGGGRG", "RRRRGGGRR", "RRRRGGRGG", "RRRRGGRGR", "RRRRGGRRG", "RRRRGGRRR", "RRRRGRGGG", "RRRRGRGGR", "RRRRGRGRG", "RRRRGRGRR", "RRRRGRRGG", "RRRRGRRGR", "RRRRGRRRG", "RRRRGRRRR",
"RRRRRGGGG", "RRRRRGGGR", "RRRRRGGRG", "RRRRRGGRR", "RRRRRGRGG", "RRRRRGRGR", "RRRRRGRRG", "RRRRRGRRR", "RRRRRRGGG", "RRRRRRGGR", "RRRRRRGRG", "RRRRRRGRR", "RRRRRRRGG", "RRRRRRRGR", "RRRRRRRRG", "RRRRRRRRR"

];


// Define the color mapping
const colorMap = {
    'G': 'green',
    'R': 'red'
};

// Get the grid element
const gridElement = document.getElementById('grid');

// Create the grid with serial numbers for the first cell in each row
let rowNumber = 1;

// Loop through the grid data
data.forEach(row => {
    row.split('').forEach((cell, index) => {
        const div = document.createElement('div');
        div.classList.add('cell');
        div.style.backgroundColor = colorMap[cell]; // Set background color based on the data

        // Add serial number only to the first cell in each row
        if (index === 0) {
            div.textContent = rowNumber; // Set the row number in the first cell
            rowNumber++; // Increment the row number for the next row
        }

        gridElement.appendChild(div); // Append cell to the grid
    });
});
