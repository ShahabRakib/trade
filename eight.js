// Define the grid data
const data = ['GGGGGGGG', 'GGGGGGGR', 'GGGGGGRG', 'GGGGGGRR', 'GGGGGRGG', 'GGGGGRGR', 'GGGGGRRG', 'GGGGGRRR', 'GGGGRGGG', 'GGGGRGGR', 'GGGGRGRG', 'GGGGRGRR', 'GGGGRRGG', 'GGGGRRGR', 'GGGGRRRG', 'GGGGRRRR', 'GGGRGGGG', 'GGGRGGGR', 'GGGRGGRG', 'GGGRGGRR', 'GGGRGRGG', 'GGGRGRGR', 'GGGRGRRG', 'GGGRGRRR', 'GGGRRGGG', 'GGGRRGGR', 'GGGRRGRG', 'GGGRRGRR', 'GGGRRRGG', 'GGGRRRGR', 'GGGRRRRG', 'GGGRRRRR', 'GGRGGGGG', 'GGRGGGGR', 'GGRGGGRG', 'GGRGGGRR', 'GGRGGRGG', 'GGRGGRGR', 'GGRGGRRG', 'GGRGGRRR', 'GGRGRGGG', 'GGRGRGGR', 'GGRGRGRG', 'GGRGRGRR', 'GGRGRRGG', 'GGRGRRGR', 'GGRGRRRG', 'GGRGRRRR', 'GGRRGGGG', 'GGRRGGGR', 'GGRRGGRG', 'GGRRGGRR', 'GGRRGRGG', 'GGRRGRGR', 'GGRRGRRG', 'GGRRGRRR', 'GGRRRGGG', 'GGRRRGGR', 'GGRRRGRG', 'GGRRRGRR', 'GGRRRRGG', 'GGRRRRGR', 'GGRRRRRG', 'GGRRRRRR', 'GRGGGGGG', 'GRGGGGGR', 'GRGGGGRG', 'GRGGGGRR', 'GRGGGRGG', 'GRGGGRGR', 'GRGGGRRG', 'GRGGGRRR', 'GRGGRGGG', 'GRGGRGGR', 'GRGGRGRG', 'GRGGRGRR', 'GRGGRRGG', 'GRGGRRGR', 'GRGGRRRG', 'GRGGRRRR', 'GRGRGGGG', 'GRGRGGGR', 'GRGRGGRG', 'GRGRGGRR', 'GRGRGRGG', 'GRGRGRGR', 'GRGRGRRG', 'GRGRGRRR', 'GRGRRGGG', 'GRGRRGGR', 'GRGRRGRG', 'GRGRRGRR', 'GRGRRRGG', 'GRGRRRGR', 'GRGRRRRG', 'GRGRRRRR', 'GRRGGGGG', 'GRRGGGGR', 'GRRGGGRG', 'GRRGGGRR', 'GRRGGRGG', 'GRRGGRGR', 'GRRGGRRG', 'GRRGGRRR', 'GRRGRGGG', 'GRRGRGGR', 'GRRGRGRG', 'GRRGRGRR', 'GRRGRRGG', 'GRRGRRGR', 'GRRGRRRG', 'GRRGRRRR', 'GRRRGGGG', 'GRRRGGGR', 'GRRRGGRG', 'GRRRGGRR', 'GRRRGRGG', 'GRRRGRGR', 'GRRRGRRG', 'GRRRGRRR', 'GRRRRGGG', 'GRRRRGGR', 'GRRRRGRG', 'GRRRRGRR', 'GRRRRRGG', 'GRRRRRGR', 'GRRRRRRG', 'GRRRRRRR', 'RGGGGGGG', 'RGGGGGGR', 'RGGGGGRG', 'RGGGGGRR', 'RGGGGRGG', 'RGGGGRGR', 'RGGGGRRG', 'RGGGGRRR', 'RGGGRGGG', 'RGGGRGGR', 'RGGGRGRG', 'RGGGRGRR', 'RGGGRRGG', 'RGGGRRGR', 'RGGGRRRG', 'RGGGRRRR', 'RGGRGGGG', 'RGGRGGGR', 'RGGRGGRG', 'RGGRGGRR', 'RGGRGRGG', 'RGGRGRGR', 'RGGRGRRG', 'RGGRGRRR', 'RGGRRGGG', 'RGGRRGGR', 'RGGRRGRG', 'RGGRRGRR', 'RGGRRRGG', 'RGGRRRGR', 'RGGRRRRG', 'RGGRRRRR', 'RGRGGGGG', 'RGRGGGGR', 'RGRGGGRG', 'RGRGGGRR', 'RGRGGRGG', 'RGRGGRGR', 'RGRGGRRG', 'RGRGGRRR', 'RGRGRGGG', 'RGRGRGGR', 'RGRGRGRG', 'RGRGRGRR', 'RGRGRRGG', 'RGRGRRGR', 'RGRGRRRG', 'RGRGRRRR', 'RGRRGGGG', 'RGRRGGGR', 'RGRRGGRG', 'RGRRGGRR', 'RGRRGRGG', 'RGRRGRGR', 'RGRRGRRG', 'RGRRGRRR', 'RGRRRGGG', 'RGRRRGGR', 'RGRRRGRG', 'RGRRRGRR', 'RGRRRRGG', 'RGRRRRGR', 'RGRRRRRG', 'RGRRRRRR', 'RRGGGGGG', 'RRGGGGGR', 'RRGGGGRG', 'RRGGGGRR', 'RRGGGRGG', 'RRGGGRGR', 'RRGGGRRG', 'RRGGGRRR', 'RRGGRGGG', 'RRGGRGGR', 'RRGGRGRG', 'RRGGRGRR', 'RRGGRRGG', 'RRGGRRGR', 'RRGGRRRG', 'RRGGRRRR', 'RRGRGGGG', 'RRGRGGGR', 'RRGRGGRG', 'RRGRGGRR', 'RRGRGRGG', 'RRGRGRGR', 'RRGRGRRG', 'RRGRGRRR', 'RRGRRGGG', 'RRGRRGGR', 'RRGRRGRG', 'RRGRRGRR', 'RRGRRRGG', 'RRGRRRGR', 'RRGRRRRG', 'RRGRRRRR', 'RRRGGGGG', 'RRRGGGGR', 'RRRGGGRG', 'RRRGGGRR', 'RRRGGRGG', 'RRRGGRGR', 'RRRGGRRG', 'RRRGGRRR', 'RRRGRGGG', 'RRRGRGGR', 'RRRGRGRG', 'RRRGRGRR', 'RRRGRRGG', 'RRRGRRGR', 'RRRGRRRG', 'RRRGRRRR', 'RRRRGGGG', 'RRRRGGGR', 'RRRRGGRG', 'RRRRGGRR', 'RRRRGRGG', 'RRRRGRGR', 'RRRRGRRG', 'RRRRGRRR', 'RRRRRGGG', 'RRRRRGGR', 'RRRRRGRG', 'RRRRRGRR', 'RRRRRRGG', 'RRRRRRGR', 'RRRRRRRG', 'RRRRRRRR'];


// Define the color mapping
const colorMap = {
    'G': 'green',
    'R': 'red'
};

// Get the grid element
const gridElement = document.getElementById('grid');

// Create the grid with serial numbers for the first cell in each row
let rowNumber = 1;

// Loop through the grid data
data.forEach(row => {
    row.split('').forEach((cell, index) => {
        const div = document.createElement('div');
        div.classList.add('cell');
        div.style.backgroundColor = colorMap[cell]; // Set background color based on the data

        // Add serial number only to the first cell in each row
        if (index === 0) {
            div.textContent = rowNumber; // Set the row number in the first cell
            rowNumber++; // Increment the row number for the next row
        }

        gridElement.appendChild(div); // Append cell to the grid
    });
});
